// Some real-time FFT! This visualizes music in the frequency domain using a
// polar-coordinate particle system altered by a coherent noise. Particle size and, theta angle 
// and radial distance are modulated using a filtered FFT with a simplex noise FBM (. Color is sampled from an image or generated
// from a simplex noise FBM (the tunable is the boolean isColorFile).

import ddf.minim.analysis.*;
import ddf.minim.*;
import javax.sound.sampled.*;

SimplexNoise simplexnoise;
OPC opc;

PImage dot;
PImage colors;

Minim minim;
//Minim minimin;
AudioInput in;
AudioOutput out;
AudioRecorder recorder;
AudioPlayer[] sound;
int AudioBufferSize;
FFT fftout,fftin,fftsong;
float[] fftFilter, fftFilterSmooth, fftFilterNorm, fftFilterNormRev, fftFilterNormPrev;

//Non runtime booleans.
boolean isDebug;
boolean isPlayer;

//Runtime booleans.
//Try to inverse frequency displaying weight ... or not.
boolean isInversed;
boolean useEMA;
boolean isColorFile;

int song;
int oldsong;
//String[] filename = {"083_trippy-ringysnarebeat-3bars.mp3"};
String[] filename = {"http://www.ledjamradio.com/sound"};
//String[] filename = {"02 Careful With That Axe, Eugene.mp3", "01. One Of These Days.mp3", "08 - The Good, The Bad and The Ugly.mp3", "06. Echoes.mp3", "07 - A fistful of Dollars [Main Title].mp3", "10 - Girl, You'll Be A Woman Soon - Urge Overkill.mp3", "01. The Eagles - Hotel California.mp3", "18 - Kill Bill Vol. 1 [Death rides a Horse].mp3", "02 - Once upon a time in America [Deborah's Theme].mp3", "17 - Once upon a time in the West [The man with the Harmonica].mp3", "Johnny Cash - Hurt.mp3", "New Shoes.mp3", "07 - Selah Sue - Explanations.mp3", "10-amon_tobin--bedtime_stories-oma.mp3", "07-amon_tobin--mass_and_spring-oma.mp3", "01-amon_tobin--journeyman-oma.mp3", "11. Redemption Song.mp3", "King Crimson - 1969 - In the Court of the Crimson King - 01 - 21st Century Schizoid Man.mp3", "02. No Woman No Cry.mp3", 
//"05. Buffalo Soldier.mp3", "17 - Disco Boy.mp3", "Bobby McFerrin - Don't Worry, Be Happy.mp3", "06. Get up Stand Up.mp3", "01-amon_tobin--journeyman-oma.mp3", 
//"02 - Plastic People.mp3" }; 

String ColorGradientImage;

int reactivity_type, switch_pulse_type, printcount;
int octaves;
float noise_fft;
float noise_scale_fft;
float pulse_type;
float smooth_factor;
float decay;

float spin = 0.0001;
float radiansPerBucket = radians(4);
float opacity = 50;
float minSize = 0.25;
float sizeScale = 0.75;

void setup()
{
  //Switch between audio player or audio line in capture.
  isPlayer = true;
  
  //Debug for now.
  isDebug = true;
  printcount = 0;
  
  //Weighting mode
  isInversed = true;
  
  //Log decay
  decay = 0.97;
  //EMA
  useEMA = true;
  smooth_factor = 0.34;
    
  int zoom = 2;
  size(zoom * 100, zoom * 100, P3D);
    
  //Choose between color gradient in file or autogenerated.
  isColorFile = false;
  
  if (isColorFile) {
    colorMode(RGB, 255);
  } else {
    colorMode(HSB, 100);
  }
  //TODO: make framerate depend on beat detection.
  int framerate = 72;
  frameRate(framerate);
       
  minim = new Minim(this);
  //minim.debugOn();
  //minimin = new Minim(this);
  //minimin.debugOn();
 
  //Small buffer size! 
  AudioBufferSize = 512;
         
  //out = minim.getLineOut(Minim.STEREO, AudioBufferSize);   
  //fftout = new FFT(out.bufferSize(), out.sampleRate());   
  
 if (isPlayer) {
    sound = new AudioPlayer[filename.length];
    //Random sound array index startup.
    song = (int)random(0, filename.length);
    sound[song] = minim.loadFile(filename[song], AudioBufferSize);
    init_sound_fft();
  } else {
     Mixer.Info[] mixerInfo;
     mixerInfo = AudioSystem.getMixerInfo(); 
    
    for(int i = 0; i < mixerInfo.length; i++) {
      println(i + ": " +mixerInfo[i].getName());
    } 
    // 0 is pulseaudio mixer on GNU/Linux
    Mixer mixer = AudioSystem.getMixer(mixerInfo[1]); 
    minim.setInputMixer(mixer); 
    in =  minim.getLineIn(Minim.STEREO, AudioBufferSize);  
    fftin = new FFT(in.bufferSize(), in.sampleRate());
    fftFilter = new float[fftin.specSize()];
    if (useEMA) fftFilterSmooth = new float[fftin.specSize()];
    fftFilterNorm = new float[fftin.specSize()];
    fftFilterNormRev = new float[fftin.specSize()];
    fftFilterNormPrev = new float[fftin.specSize()];
  }
  
  //Noise initialisation.
  simplexnoise = new SimplexNoise();
  noise_fft = 0;
  //High reactivity noise source. 1 mean medium, 2 mean high.  
  reactivity_type = 2;
  //It's the default the number of the FBM octaves.  
  octaves = 8;
  
  //Reactive pulse type by default.
  switch_pulse_type = 2;
  
  //ColorGradientImage = "Chaud.png"; 
  ColorGradientImage = "colors.png";  
  dot = loadImage("dot.png");
  colors = loadImage(ColorGradientImage);
  // Connect to the local instance of fcserver
  opc = new OPC(this, "127.0.0.1", 7890);
  //opc = new OPC(this, "192.168.1.4", 7890);
  
  opc.ledGrid8x8(0 * 64, width * 1/2, height * 1/2, height/8, 0, false);
  
  // Make the status LED quiet
  opc.setStatusLed(false);
  
  // Hide or show leds location
  opc.showLocations(true);
    
  smooth();
}

void keyPressed() {
  float inc = 0.01;
  if (keyCode == RIGHT && decay < 1-inc && !useEMA) {
    decay += inc;
    if (isDebug) switchPrintCountDown();
  }
  if (keyCode == LEFT && decay > inc && !useEMA) {
    decay -= inc;
    if (isDebug) switchPrintCountDown();
  }
  if (keyCode == UP && smooth_factor < 1-inc && useEMA) {
    smooth_factor += inc;
    if (isDebug) switchPrintCountDown();
  }
  if (keyCode == DOWN && smooth_factor > inc && useEMA) { 
    smooth_factor -= inc;
    if (isDebug) switchPrintCountDown();
  }
  if (key == 'e') {
    useEMA = !useEMA;
    if (isDebug) switchPrintCountDown();
   }
  if (key == 'a') {
    if (isDebug) switchPrintCountDown();
   }
  if (key == 'c') {
    isColorFile = !isColorFile;
    if (isDebug) switchPrintCountDown();
   } 
  if (key == 'w') {
    //Toggle key
    isInversed = !isInversed;
    if (isDebug) switchPrintCountDown();
   }
  if (key == 'p') {
    switch_pulse_type = 1;
    if (isDebug) switchPrintCountDown();
   }
  if (key == 'o') {
    switch_pulse_type = 2;
    if (isDebug) switchPrintCountDown();  
  }
  if (key == 'i') {
    switch_pulse_type = 3;
    if (isDebug) switchPrintCountDown();
  }
  if (key == 'u') {
    switch_pulse_type = 4;
    if (isDebug) switchPrintCountDown();
  }
  if (key == '1') {
    reactivity_type = 1;
    if (isDebug) switchPrintCountDown();
  }
  if (key == '2') {
    reactivity_type = 2;
    if (isDebug) switchPrintCountDown();  
  }
  //Limit the number of FBM octaves to [1-16].
  if (key == '+' && octaves < 16) {
    octaves++;
    if (isDebug) switchPrintCountDown();
  }
  if (key == '-' && octaves > 1) {
    octaves--;
    if (isDebug) switchPrintCountDown(); 
  }
  if (key == 'd') opc.setDithering(false);
  if (key == ' ' && isPlayer) { 
    sound[song].pause();
  }
  if (key == 'p' && isPlayer) {
    sound[song].play();
  }
  if (key == 'n' && isPlayer && sound[song].position() <= sound[song].length()-4*AudioBufferSize && song < filename.length-1) {
    oldsong = song;
    song++;
    sound[song] = minim.loadFile(filename[song], AudioBufferSize);
    reinit_sound_fft();
  }
  if (key == 'b' && isPlayer && sound[song].position() <= sound[song].length()-4*AudioBufferSize && song > 0) {
    oldsong = song;
    song--;
    sound[song] = minim.loadFile(filename[song], AudioBufferSize);
    reinit_sound_fft();
  }
  if (key == 'f' && isPlayer) sound[song].skip(100);
  if (key == 'r' && isPlayer) sound[song].skip(-100);
}

void keyReleased() {
  if (key == 'd') opc.setDithering(true);
}

void mousePressed()
{
  //Choose a position to cue to based on where the user clicked.
  //the length() method returns the length of recording in milliseconds.
  if (isPlayer && mouseY <=  height*0.03125) {
    float mousex = mouseX;
    int position = int(map(mousex, 0, width, 0, sound[song].length()));
    sound[song].cue(position);
  }
}

//It's a standard FBM with a coherent noise.
float simplexnoise_fbm(float x, float y, int octaves, float persistence, float lacunarity) {
  //One might argue that the initial frequency should always be 1.0f for the very first octave.
  float frequency = 1.0f;
  float amp = 1.0f;
  float maxamp = 1.0f;
  float r = ((float)simplexnoise.noise((double)(x), (double)(y)) + 1) / 2.0f;
  
  prStr("Number of octaves: " + octaves + "\nFrequency: " + frequency + "\nPersistence: " + persistence + "\nLacunarity: " + lacunarity);
  for (int l = 1; l < octaves; l++) {
    amp *= persistence;
    maxamp += amp;
    frequency *= lacunarity;
    //Keep the same behaviour as the processing perlin noise() function, return values in the [0,1] float range.
    r += (((float)simplexnoise.noise((double)(frequency * x), (double)(frequency * y)) + 1) / 2.0f) * amp;
  }
  return r / maxamp;
} 

//Very Basic debug
void switchPrintCountUp() {
   printcount = 1;
}

void switchPrintCountDown() {
   printcount = 0; 
}
  
void prStr(String string) {
  if (printcount == 0 && isDebug) { 
    println(string);
  }   
}

//TODO: pass an FFT type argument to init differently the FFT filter.
void init_fft() {
     fftsong = new FFT(sound[song].bufferSize(), sound[song].sampleRate());
     fftFilter = new float[fftsong.specSize()]; 
     if (useEMA) fftFilterSmooth = new float[fftsong.specSize()]; 
     fftFilterNorm = new float[fftsong.specSize()];
     fftFilterNormRev = new float[fftsong.specSize()];
     fftFilterNormPrev = new float[fftsong.specSize()];
}  

void init_sound_fft() {
     sound[song].play();
     init_fft();
}

void reinit_sound_fft() {
     sound[oldsong].close();
     init_sound_fft();
}

void draw()
{
  background(0);
       
  if (isPlayer && sound[song].position() >= sound[song].length()-4*AudioBufferSize && song < filename.length-1 && song >= 0) {
     oldsong = song; 
     song++;
     sound[song] = minim.loadFile(filename[song], AudioBufferSize);
     reinit_sound_fft();    
  }
  
  float now = millis(); 
    
  if (isPlayer) {
    fftsong.forward(sound[song].mix);
  } else {
    fftin.forward(in.mix);
    //fftout.forward(out.mix);
  }
   
  for (int i = 0; i < fftFilter.length; i++) {
    if (isPlayer) {
      //EMA
      if (useEMA) {  
        fftFilterSmooth[i] = smooth_factor * fftFilterSmooth[i] + (1 - smooth_factor) * fftsong.getBand(i);
      } else {
        fftFilter[i] = max(fftFilter[i] * decay, log(1 + fftsong.getBand(i)));
      }
    } else { 
      //EMA
      if (useEMA) {
        fftFilterSmooth[i] = smooth_factor * fftFilterSmooth[i] + (1 - smooth_factor) * fftin.getBand(i);
      } else {
        fftFilter[i] = max(fftFilter[i] * decay, log(1 + fftin.getBand(i)));
        //fftFilter[i] = max(fftFilter[i] * decay, log(1 + fftout.getBand(i)));
      }
    }
  }
  
  if (useEMA) { 
    fftFilter = fftFilterSmooth;
    prStr("FFT Filter: EMA with smooth factor = " + smooth_factor);
  } else {
    prStr("FFT Filter: Log with decay = " + decay);
  }   
   
  fftFilterNormPrev = fftFilterNorm;
  
  //Normalize fftFilter array values between [0-1] for displaying and noise feeding purpose.
  float fftFiltermax = max(fftFilter);
  float fftFiltermin = min(fftFilter);
  for (int i = 0; i < fftFilter.length; i++) {
    fftFilterNorm[i] = map(fftFilter[i], fftFiltermin, fftFiltermax, 0 , 1);
    //Zero NaN values.
    if (Float.isNaN(fftFilterNorm[i])) fftFilterNorm[i] = 0;
    fftFilterNormRev[i] = 1 - fftFilterNorm[i];
  }
           
  for (int i = 0; i < fftFilter.length; i++) {
    //Variation between each frequency bands. 
    float fftFilterNormVar = abs(fftFilterNorm[i] - fftFilterNormPrev[i]);
    if (isInversed) { 
     fftFilterNorm[i] = 1 - fftFilterNorm[i];
     prStr("Weighting: Basic inversed frequency weighting display mode");
    } else {
     prStr("Weighting: No frequency weighting display mode");   
    }  
    switch(switch_pulse_type) {
      case 1:
        float pulse_one = sin(fftFilterNorm[i]);
        pulse_type = pulse_one;
        prStr("Pulse: " + switch_pulse_type + " -> sin(fftFilterNorm[i])");
        break;
      case 2:
        float pulse_two = sin(fftFilterNormRev[i]);
        pulse_type = pulse_two;
        prStr("Pulse: " + switch_pulse_type + " -> sin(fftFilterNormRev[i])");
        break;
      case 3:
        float pulse_three = sin(fftFilterNormVar);
        pulse_type=pulse_three;
        prStr("Pulse: " + switch_pulse_type + " -> sin(fftFilterNormVar)");
        break;
      case 4:
        float pulse_four = sin(1 - fftFilterNormVar);
        pulse_type=pulse_four;
        prStr("Pulse: " + switch_pulse_type + " -> sin(1 - fftFilterNormVar)");
        break;
      default: 
        float pulse_default = sin(fftFilterNorm[i]);
        pulse_type=pulse_default;
        prStr("Pulse: default sin(fftFilterNorm[i])");
    }  
    //TODO: Play with the FBM properties more precisely.
    switch(reactivity_type) {
      case 1:
        noise_scale_fft = 0.5125 * 2;
        float medium_noise_fft = simplexnoise_fbm(now * spin + noise_fft * fftFilterNorm[i] * noise_scale_fft * fftFilterNormVar, noise_scale_fft * pulse_type * noise_fft, octaves, (float)1/octaves, 0.5f);
        noise_fft = medium_noise_fft;
        prStr("Reactivity: medium");
        break;
      case 2:
        noise_scale_fft = 0.5125;
        float high_noise_fft = simplexnoise_fbm(now * spin + noise_fft * noise_scale_fft + noise_fft * fftFilterNorm[i] * noise_scale_fft * fftFilterNormVar, noise_fft * noise_scale_fft + noise_scale_fft * pulse_type * noise_fft, octaves, (float)1/octaves, 0.5f);
        noise_fft = high_noise_fft;
        prStr("Reactivity: high");
        break;
      default:
        noise_scale_fft = 0.5125 * 2;
        float noise_default = simplexnoise_fbm(now * spin + noise_fft * fftFilterNorm[i] * noise_scale_fft * fftFilterNormVar, noise_scale_fft * pulse_type * noise_fft, octaves, (float)1/octaves, 0.5f);
        noise_fft = noise_default;
        prStr("Reactivity: default (medium)");        
    } 
    //float size_pulse_blink = fftFilterNorm[i] * abs(pulse_type);
    float size_pulse_noblink = fftFilterNorm[i] * abs(pulse_type) * noise_fft;
    float size = height * (minSize + sizeScale * size_pulse_noblink);
    
    //Do not loose some fftFilter values, use fftFilter normalized.
    float centerx = fftFilterNorm[i] * width * noise_fft; 
    float centery = fftFilterNorm[i] * height * -noise_fft;
    PVector center = new PVector(centerx * 1/2, centery * 1/2);
    center.rotate(now * spin + i * radiansPerBucket);
    center.add(new PVector(width * 1/2, height * 1/2));
                 
    if (isColorFile) {
      colorMode(RGB, 255);
      color rgb = colors.get(int(map(i, 0, fftFilter.length-1, 0, colors.width-1)), colors.height/2);
      tint(rgb, fftFilterNormRev[i] * noise_fft * opacity);
      prStr("Color: Use color file = " + ColorGradientImage + " with opacity = " + opacity + " modulated by a coherent noise");
    } else {
      colorMode(HSB, 100);
      //Choose hue values smoothly around the HSB spectrum to begin with.
      float hue = now * spin + fftFilterNormRev[i] * noise_fft * 100;
      //Saturation level is rather high with fftFilter array values normalization smoothed by a simplex noise FBM. 
      float saturation = fftFilterNormRev[i] * noise_fft * 100;
      //Small brightness variation around a minimum value smoothed by a simplex noise FBM.
      float brightness = 9.25 + fftFilterNormRev[i] * noise_fft * 2.125;
      color hsb = color( 
         hue % 100,
         saturation,
         brightness 
      );
      tint(hsb, fftFilterNormRev[i] * opacity);
      prStr("Color: Use gradient autogenerated with a coherent noise and opacity = " + opacity);
    }
    //Last call to a prStr function in the processing runtime.
    switchPrintCountUp();
    blendMode(ADD);
            
    image(dot, center.x - size/2, center.y - size/2, size, size);
  } 
  if (isPlayer) {
    if (isColorFile) {
      stroke(255);
    } else {  
      stroke(100);
    }
  float position = map(sound[song].position(), 0, sound[song].length(), 0, width);
  line(position, 0, position, height*0.03125);
  line(0, height*0.03125, width, height*0.03125);
  }  
}

void stop()
{
  //Always close Minim audio classes when you are done with them
  out.close();
  if (isPlayer) {
    sound[song].close();
  } else {
    in.close();
  }
  
  minim.stop();
  //minimin.stop();

  super.stop();
}

